{:tasks
 {:requires ([babashka.fs :as fs]
             [clojure.string :as str])

  :init (do
          (def COMMIT-HASH
            (-> (shell {:out :string} "git rev-parse --short HEAD")
                :out
                str/trim))

          (def BACKEND-CONFIG {:clojure-defines {'heraldicon.config/is_backend true}})

          (def PROD-FRONTEND-DIR "build/prod")
          (def PROD-BACKEND-DIR "backend/build/prod")
          (def PROD-CONFIG {:closure-defines {'heraldicon.config/stage "prod"
                                              'heraldicon.config/commit COMMIT-HASH}})

          (def STAGING-FRONTEND-DIR "build/staging")
          (def STAGING-BACKEND-DIR "backend/build/staging")
          (def STAGING-CONFIG {:closure-defines {'heraldicon.config/stage "staging"
                                                 'heraldicon.config/commit COMMIT-HASH}})

          (defn build-frontend-release [build-dir config]
            (fs/delete-tree STAGING-FRONTEND-DIR)
            (fs/delete-tree PROD-FRONTEND-DIR)

            (fs/create-dirs build-dir)
            (doseq [file (fs/list-dir "assets")]
              (if (fs/directory? file)
                (fs/copy-tree file (fs/path build-dir (fs/file-name file)) {:replace-existing true})
                (fs/copy file build-dir {:replace-existing true})))

            (def output-dir
              (str (fs/path build-dir "js/generated")))
            (fs/delete-tree output-dir)

            (fs/update-file (str (fs/path build-dir "index.html"))
                            (fn [content]
                              (str/replace content (re-pattern "__GIT-COMMIT-HASH__") COMMIT-HASH)))

            (shell "npx shadow-cljs release frontend --config-merge"
                   (prn-str (merge config {:output-dir output-dir}))))

          (defn create-sentry-release-backend
            [build-dir stage]

            (let [release-name (str COMMIT-HASH "-" stage)]
              (shell (str "npx @sentry/cli releases --org heraldicon "
                          "new --project heraldicon-backend "
                          "--url https://github.com/heraldry/heraldicon/commit/" COMMIT-HASH " "
                          release-name))
              (shell (str "npx @sentry/cli releases --org heraldicon "
                          "files --project heraldicon-backend " release-name " "
                          "upload-sourcemaps --url-prefix / "
                          build-dir))))

          (defn create-sentry-release-frontend
            [build-dir stage]

            (let [release-name (str COMMIT-HASH "-" stage)]
              (shell (str "npx @sentry/cli releases --org heraldicon "
                          "new --project heraldicon-frontend "
                          "--url https://github.com/heraldry/heraldicon/commit/" COMMIT-HASH " "
                          release-name))
              (shell (str "npx @sentry/cli releases --org heraldicon "
                          "files --project heraldicon-frontend " release-name " "
                          "upload-sourcemaps --url-prefix / "
                          build-dir))))

          (defn deploy-frontend [build-dir target]
            (shell "scripts/sync-with-s3" build-dir target)
            (shell (format "aws --profile heraldry-serverless s3 cp --acl public-read
                           '%s/index.html' 's3://%s/index.html'
                           --metadata-directive REPLACE
                           --cache-control max-age=0,no-cache,no-store,must-revalidate
                           --content-type text/html"
                           build-dir target))
            (shell "scripts/invalidate-distribution" target))

          (defn timestamp []
            (-> (shell {:out :string} "date" "+%Y-%m-%d_%H-%M-%S")
                :out
                str/trim))

          (defn tag-frontend-deploy []
            (shell "git" "tag" (str "deploy-frontend-" (timestamp))))

          (defn tag-backend-deploy []
            (let [tag (str "deploy-backend-" (timestamp))]
              (shell "git" "tag" tag)
              (shell {:dir "backend"} "git" "tag" tag))))

  check-clj-kondo (shell "clj-kondo --parallel --lint src test backend/src")
  check-cljfmt (shell "cljfmt --parallel check src test backend/src")

  check-debug-print-frontend (-> (shell {:continue true}
                                        "rg '(println|\\(js/console.log)' --iglob='!log_appender.cljs' src")
                                 :exit
                                 (= 1)
                                 (or (throw (Exception. "found debug prints in frontend"))))
  check-debug-print-backend (-> (shell {:continue true}
                                       "rg '(println|\\(js/console.log)' backend/src --glob=!backend/src/heraldicon/manage.cljs --glob=!backend/src/heraldicon/backend/server.cljs")
                                :exit
                                (= 1)
                                (or (throw (Exception. "found debug prints in backend"))))

  check-json (-> (shell {:out :string} "find locales -iname '*.json'")
                 (shell {:out :string} "xargs jq ."))

  check-dirty-frontend (-> (shell {:continue true} "git diff --quiet")
                           :exit
                           (= 0)
                           (or (throw (Exception. ". is dirty"))))

  check-dirty-backend (-> (shell {:continue true
                                  :dir "backend"} "git diff --quiet")
                          :exit
                          (= 0)
                          (or (throw (Exception. "backend is dirty"))))

  check-all {:depends [check-clj-kondo
                       check-cljfmt
                       check-debug-print-frontend
                       check-debug-print-backend
                       check-json]}

  dev-local (shell "npx shadow-cljs watch frontend backend test manage")

  staging-backend-release (do
                            (fs/delete-tree STAGING-BACKEND-DIR)
                            (fs/delete-tree PROD-BACKEND-DIR)
                            (shell "npx shadow-cljs release backend --config-merge"
                                   (prn-str (merge-with
                                             merge
                                             STAGING-CONFIG
                                             BACKEND-CONFIG
                                             {:output-to (str (fs/path STAGING-BACKEND-DIR "backend.js"))}))))

  staging-backend-deploy (do
                           (run 'staging-backend-release)
                           (create-sentry-release-backend STAGING-BACKEND-DIR "staging")
                           (shell {:dir "backend"} "bb staging-deploy"))

  staging-frontend-release (build-frontend-release STAGING-FRONTEND-DIR STAGING-CONFIG)

  staging-frontend-deploy (do
                            (run 'staging-frontend-release)
                            (create-sentry-release-frontend STAGING-FRONTEND-DIR "staging")
                            (deploy-frontend STAGING-FRONTEND-DIR "cdn.staging.heraldicon.org"))

  prod-backend-release (do
                         (fs/delete-tree STAGING-BACKEND-DIR)
                         (fs/delete-tree PROD-BACKEND-DIR)
                         (shell "npx shadow-cljs release backend --config-merge"
                                (prn-str
                                 (merge-with
                                  merge
                                  PROD-CONFIG
                                  BACKEND-CONFIG
                                  {:output-to (str (fs/path PROD-BACKEND-DIR "backend.js"))}))))

  prod-backend-deploy {:depends [check-clj-kondo
                                 check-cljfmt
                                 check-debug-print-frontend
                                 check-debug-print-backend
                                 check-json
                                 check-dirty-frontend
                                 check-dirty-backend]
                       :task (do
                               (run 'prod-backend-release)
                               (create-sentry-release-backend PROD-BACKEND-DIR "prod")
                               (shell {:dir "backend"} "bb prod-deploy")
                               (tag-backend-deploy))}

  stats-release (do
                  (fs/delete-tree STAGING-BACKEND-DIR)
                  (fs/delete-tree PROD-BACKEND-DIR)
                  (shell "npx shadow-cljs release stats --config-merge"
                         (prn-str
                          (merge-with
                           merge
                           PROD-CONFIG
                           BACKEND-CONFIG
                           {:output-to (str (fs/path PROD-BACKEND-DIR "stats.js"))}))))

  stats-deploy {:depends [check-clj-kondo
                          check-cljfmt
                          check-debug-print-frontend
                          check-debug-print-backend
                          check-json
                          check-dirty-frontend
                          check-dirty-backend]
                :task (do
                        (run 'stats-release)
                        (create-sentry-release-backend PROD-BACKEND-DIR "prod")
                        (shell {:dir "backend"} "bb stats-deploy"))}

  prod-frontend-release (build-frontend-release PROD-FRONTEND-DIR PROD-CONFIG)

  prod-frontend-deploy {:depends [check-clj-kondo
                                  check-cljfmt
                                  check-debug-print-frontend
                                  check-json
                                  check-dirty-frontend]
                        :task (do
                                (run 'prod-frontend-release)
                                (deploy-frontend PROD-FRONTEND-DIR "cdn.heraldicon.org")
                                (tag-frontend-deploy))}

  outdated (do
             (shell "clojure -Sdeps '{:deps {olical/depot {:mvn/version \"2.2.0\"} rewrite-clj/rewrite-clj {:mvn/version \"0.6.1\"}}}' -M -m depot.outdated.main")
             (shell "npm outdated"))}}
